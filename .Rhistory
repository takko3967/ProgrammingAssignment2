install.packages("KernSmooth")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.2.1/library")
install.packages("devtools")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
library("devtools")
library(devtools)
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
search()
library("swirl", lib.loc="~/R/win-library/3.2")
f<-function(x,y)
f
swirl()
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.files(diet_data)
list.files("diet_data")
for (i in 1:5) {print(i)}
?str()
files<- list.files("diet_data")
files
files[3]
read.csv(files[3])
files<- list.files("diet_data", full.names = TRUE)
read.csv(files[3])
str(apply)
library(iris)
library(datasets)
data(iris)
?iris
iris
?mean
iris[virginica]
iris["virginica"]
iris[$virginica]
iris$virginica
x <- iris["Species"== "virginica"]
x
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
iris[,Sepal.Length]
iris[,"Sepal.Length"]
iris[,"Species"= "virginica"]
?tapply
tapply(iris, Species, mean)
tapply(iris, "Species", mean)
length(iris)
s <- split(iris, iris$Species)
s
colMeans(s$virginica)
t <- numeric(s)
t <- numeric(s$virginica)
tapply(iris$Sepal.Length, iris$Species, mean)
?tapply
library(datasets)
data(mtcars)
mtcars
sapply(mtcars, cyl, mean)
s <- split(mtcars$mpg, mtcars$cyl)
s
sapply(s, mean)
?split
t <- split(mtcars$hp, mtcars$cyl)
sapply(t, mean)
r<-sapply(t, mean)
r[3]- r[1]
debug(ls)
ls
ls()
library(datasets)
data("iris")
s <- split(iris$Sepal.Length, iris$Species)
s
mean(s$virginica)
makeCacheMatrix <- function(x = matrix()) {
inv = NULL
set = function(y) {
x <<- y
inv = NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data, ...)
x$setinv(inv)
return(inv)
}
?set.seed
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
makeCacheMatrix(mat1)
mat1
cacheSolve(mat1)
View(mat1)
makeCacheMatrix <- function(x = matrix()) {
inv = NULL
set = function(y) {
x <<- y
inv = NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data, ...)
x$setinv(inv)
return(inv)
}
matrix(1:20,4,5)
x <- matrix(1:16,4,4)
cacheSolve(x)
makeCacheMatrix(x)
makeCacheMatrix(x = matrix(1:16,4,4))
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setinv <- function(solve) inv <<- inverse
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
matrix <- x$get()
inv <- solve(matrix, ...)
x$setinv(inv)
return(inv)
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
a$set(matrix(1:4,2,2)
a$set(matrix(1:4,2,2))
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
matrix <- x$get()
inv <- solve(matrix, ...)
x$setinv(inv)
return(inv)
}
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(x)
cacheSolve <- function(x = matrix(), ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
matrix <- x$get()
inv <- solve(matrix, ...)
x$setinv(inv)
return(inv)
}
cacheSolve(x)
?solve
?inverse
source("cachematrix.R")
setwd("c/Users/Son/ProgrammingAssignment2")
setwd("C:/Users/Son")
setwd("C:/Users/Son/ProgrammingAssignment2")
source("cachematrix.R")
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
makeCacheMatrix(a)
a
cacheSolve(a)
a(x)
x <- matrix(1:16,4,4)
a$set(x)
cacheSolve(a)
a$set(matrix(1:16,4,4))
cacheSolve(a)
x
cacheSolve(a)
